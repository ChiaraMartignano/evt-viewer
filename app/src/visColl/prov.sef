<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://ns.saxonica.com/xslt/export" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vv="http://saxon.sf.net/generated-variable" xmlns:java-type="http://saxon.sf.net/java-type" version="10" packageVersion="1" saxonVersion="9.7.0.21" timeStamp="2018-06-01T11:39:17.408+02:00" target="JS">
 <co id="0" binds="0">
  <mode onNo="TC" flags="dW" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="0" flags="os" line="5" module="file:/C:/Users/Utente/evt-viewer/app/src/visColl/prov.xslt">
    <p.nodeTest role="match" test="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType==9||item.nodeType==11);"/>
    <elem role="action" vn="20" baseUri="file:/C:/Users/Utente/evt-viewer/app/src/visColl/prov.xslt" ns="xsl=http://www.w3.org/1999/XSL/Transform" line="7" name="xmlRidotto">
     <applyT bSlot="0">
      <axis role="select" name="descendant" nodeTest="element(Q{}appunto)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType==1 &amp;&amp; q.uri==''&amp;&amp;q.local=='appunto';"/>
     </applyT>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="1" rank="1" minImp="0" slots="0" flags="os" line="11" module="file:/C:/Users/Utente/evt-viewer/app/src/visColl/prov.xslt">
    <p.withUpper role="match" axis="ancestor" upFirst="false">
     <p.nodeTest test="element(Q{}appunto)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType==1 &amp;&amp; q.uri==''&amp;&amp;q.local=='appunto';"/>
     <p.nodeTest test="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType==9||item.nodeType==11);"/>
    </p.withUpper>
    <elem role="action" vn="20" baseUri="file:/C:/Users/Utente/evt-viewer/app/src/visColl/prov.xslt" ns="xsl=http://www.w3.org/1999/XSL/Transform" line="14" name="appunto">
     <sequence>
      <elem name="autore" flags="l">
       <valueOf flags="l">
        <convert from="xs:untypedAtomic" to="xs:string">
         <first>
          <data>
           <axis name="child" nodeTest="element(Q{}autore)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType==1 &amp;&amp; q.uri==''&amp;&amp;q.local=='autore';"/>
          </data>
         </first>
        </convert>
       </valueOf>
      </elem>
      <elem line="17" name="titolo" flags="l">
       <valueOf flags="l">
        <convert from="xs:untypedAtomic" to="xs:string">
         <first>
          <data>
           <axis name="child" nodeTest="element(Q{}titolo)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType==1 &amp;&amp; q.uri==''&amp;&amp;q.local=='titolo';"/>
          </data>
         </first>
        </convert>
       </valueOf>
      </elem>
      <elem line="20" name="descrizione" flags="l">
       <valueOf flags="l">
        <convert from="xs:untypedAtomic" to="xs:string">
         <first>
          <data>
           <axis name="child" nodeTest="element(Q{}descrizione)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType==1 &amp;&amp; q.uri==''&amp;&amp;q.local=='descrizione';"/>
          </data>
         </first>
        </convert>
       </valueOf>
      </elem>
      <elem line="23" name="link" flags="l">
       <valueOf flags="l">
        <convert from="xs:untypedAtomic" to="xs:string">
         <first>
          <data>
           <axis name="child" nodeTest="element(Q{}link)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType==1 &amp;&amp; q.uri==''&amp;&amp;q.local=='link';"/>
          </data>
         </first>
        </convert>
       </valueOf>
      </elem>
      <elem line="26" name="creato" flags="l">
       <valueOf flags="l">
        <convert from="xs:untypedAtomic" to="xs:string">
         <first>
          <data>
           <axis name="child" nodeTest="element(Q{}creato)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType==1 &amp;&amp; q.uri==''&amp;&amp;q.local=='creato';"/>
          </data>
         </first>
        </convert>
       </valueOf>
      </elem>
      <elem line="29" name="pubblicato" flags="l">
       <valueOf flags="l">
        <convert from="xs:untypedAtomic" to="xs:string">
         <first>
          <data>
           <axis name="child" nodeTest="element(Q{}pubblicato)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType==1 &amp;&amp; q.uri==''&amp;&amp;q.local=='pubblicato';"/>
          </data>
         </first>
        </convert>
       </valueOf>
      </elem>
     </sequence>
    </elem>
   </templateRule>
  </mode>
 </co>
 <overridden/>
 <output>
  <property name="indent" value="yes"/>
  <property name="version" value="1.0"/>
  <property name="encoding" value="iso-8859-1"/>
  <property name="media-type" value="text"/>
  <property name="{http://saxon.sf.net/}stylesheet-version" value="10"/>
  <property name="method" value="xml"/>
 </output>
 <decimalFormat decimal-separator="46" grouping-separator="44" digit="35" minus-sign="45" percent="37" per-mille="8240" zero-digit="48" exponent-separator="101" pattern-separator="59" infinity="Infinity" NaN="NaN"/>
</package>
<?Î£ ef1b4db0?>
